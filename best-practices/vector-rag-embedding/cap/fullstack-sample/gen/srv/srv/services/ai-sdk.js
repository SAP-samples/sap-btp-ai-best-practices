import { AzureOpenAiEmbeddingClient } from "@sap-ai-sdk/foundation-models";
export default class AiSdk {
    resourceGroupId = "default";
    /**
     * Create Embeddings
     * @param {Array<IScienceData>} science data - An array of science data.
     * @return {Promise} - Returns a Promise that resolves to an array of embeddings.
     */
    createEmbeddings = async (rows, batchSize) => {
        try {
            const client = this.getEmbeddingClient(this.resourceGroupId);
            for (let i = 0; i < rows.length / batchSize; i++) {
                const startIndex = i * batchSize;
                const batchTopics = rows.slice(startIndex, startIndex + batchSize).map((row) => row.Topic);
                const batchResponse = await client.run({ input: batchTopics });
                const batchEmbeddings = batchResponse.getEmbeddings();
                batchEmbeddings.forEach((response, idx) => {
                    rows[startIndex + idx].Embedding = `[${response.join(",")}]`;
                });
            }
            return rows;
        }
        catch (error) {
            const errorMessage = error instanceof Error ? error.message : "Error creating embeddings";
            throw new Error(errorMessage);
        }
    };
    getEmbeddingClient = (resourceGroupId) => {
        return new AzureOpenAiEmbeddingClient({
            modelName: "text-embedding-3-small",
        });
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWktc2RrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vc3J2L3NlcnZpY2VzL2FpLXNkay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUczRSxNQUFNLENBQUMsT0FBTyxPQUFPLEtBQUs7SUFDakIsZUFBZSxHQUFXLFNBQVMsQ0FBQztJQUUzQzs7OztPQUlHO0lBQ0ksZ0JBQWdCLEdBQUcsS0FBSyxFQUFFLElBQXlCLEVBQUUsU0FBaUIsRUFBZ0IsRUFBRTtRQUM3RixJQUFJLENBQUM7WUFDSCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1lBRTdELEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLFNBQVMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDO2dCQUNqRCxNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsU0FBUyxDQUFDO2dCQUNqQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxVQUFVLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQzNGLE1BQU0sYUFBYSxHQUFHLE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO2dCQUMvRCxNQUFNLGVBQWUsR0FBRyxhQUFhLENBQUMsYUFBYSxFQUFFLENBQUM7Z0JBQ3RELGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFhLEVBQUUsR0FBVyxFQUFFLEVBQUU7b0JBQ3JELElBQUksQ0FBQyxVQUFVLEdBQUcsR0FBRyxDQUFDLENBQUMsU0FBUyxHQUFHLElBQUksUUFBUyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO2dCQUNoRSxDQUFDLENBQUMsQ0FBQztZQUNMLENBQUM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7UUFBQyxPQUFPLEtBQUssRUFBRSxDQUFDO1lBQ2YsTUFBTSxZQUFZLEdBQUcsS0FBSyxZQUFZLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsMkJBQTJCLENBQUM7WUFDMUYsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNoQyxDQUFDO0lBQ0gsQ0FBQyxDQUFDO0lBRWUsa0JBQWtCLEdBQUcsQ0FBQyxlQUF1QixFQUFFLEVBQUU7UUFDaEUsT0FBTyxJQUFJLDBCQUEwQixDQUFDO1lBQ3BDLFNBQVMsRUFBRSx3QkFBd0I7U0FDcEMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDO0NBQ0giLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBenVyZU9wZW5BaUVtYmVkZGluZ0NsaWVudCB9IGZyb20gXCJAc2FwLWFpLXNkay9mb3VuZGF0aW9uLW1vZGVsc1wiO1xuaW1wb3J0IHsgSVNjaWVuY2VEYXRhIH0gZnJvbSBcIi4uL3R5cGVzLmpzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFpU2RrIHtcbiAgcHVibGljIHJlc291cmNlR3JvdXBJZDogc3RyaW5nID0gXCJkZWZhdWx0XCI7XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBFbWJlZGRpbmdzXG4gICAqIEBwYXJhbSB7QXJyYXk8SVNjaWVuY2VEYXRhPn0gc2NpZW5jZSBkYXRhIC0gQW4gYXJyYXkgb2Ygc2NpZW5jZSBkYXRhLlxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSAtIFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdG8gYW4gYXJyYXkgb2YgZW1iZWRkaW5ncy5cbiAgICovXG4gIHB1YmxpYyBjcmVhdGVFbWJlZGRpbmdzID0gYXN5bmMgKHJvd3M6IEFycmF5PElTY2llbmNlRGF0YT4sIGJhdGNoU2l6ZTogbnVtYmVyKTogUHJvbWlzZTxhbnk+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgY2xpZW50ID0gdGhpcy5nZXRFbWJlZGRpbmdDbGllbnQodGhpcy5yZXNvdXJjZUdyb3VwSWQpO1xuXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3MubGVuZ3RoIC8gYmF0Y2hTaXplOyBpKyspIHtcbiAgICAgICAgY29uc3Qgc3RhcnRJbmRleCA9IGkgKiBiYXRjaFNpemU7XG4gICAgICAgIGNvbnN0IGJhdGNoVG9waWNzID0gcm93cy5zbGljZShzdGFydEluZGV4LCBzdGFydEluZGV4ICsgYmF0Y2hTaXplKS5tYXAoKHJvdykgPT4gcm93LlRvcGljKTtcbiAgICAgICAgY29uc3QgYmF0Y2hSZXNwb25zZSA9IGF3YWl0IGNsaWVudC5ydW4oeyBpbnB1dDogYmF0Y2hUb3BpY3MgfSk7XG4gICAgICAgIGNvbnN0IGJhdGNoRW1iZWRkaW5ncyA9IGJhdGNoUmVzcG9uc2UuZ2V0RW1iZWRkaW5ncygpO1xuICAgICAgICBiYXRjaEVtYmVkZGluZ3MuZm9yRWFjaCgocmVzcG9uc2U6IGFueSwgaWR4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICByb3dzW3N0YXJ0SW5kZXggKyBpZHhdLkVtYmVkZGluZyA9IGBbJHtyZXNwb25zZSEuam9pbihcIixcIil9XWA7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJvd3M7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogXCJFcnJvciBjcmVhdGluZyBlbWJlZGRpbmdzXCI7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKTtcbiAgICB9XG4gIH07XG5cbiAgcHJpdmF0ZSByZWFkb25seSBnZXRFbWJlZGRpbmdDbGllbnQgPSAocmVzb3VyY2VHcm91cElkOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gbmV3IEF6dXJlT3BlbkFpRW1iZWRkaW5nQ2xpZW50KHtcbiAgICAgIG1vZGVsTmFtZTogXCJ0ZXh0LWVtYmVkZGluZy0zLXNtYWxsXCIsXG4gICAgfSk7XG4gIH07XG59XG4iXX0=