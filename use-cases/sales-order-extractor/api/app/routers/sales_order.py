"""
Router para operaciones de Sales Orders con HANA
"""

import logging
from fastapi import APIRouter, HTTPException, Depends
from typing import Dict, Any, Optional

from ..hana.service import hana_service
from ..hana.models import SalesOrderRequest, SalesOrderResponse

logger = logging.getLogger(__name__)

router = APIRouter()

@router.post("/save", response_model=SalesOrderResponse)
async def save_sales_order(sales_order: SalesOrderRequest) -> SalesOrderResponse:
    """
    Guarda una orden de venta en HANA
    
    Args:
        sales_order: Datos de la orden de venta
        
    Returns:
        SalesOrderResponse: Respuesta con el resultado de la operación
    """
    try:
        logger.info("Recibida solicitud para guardar orden de venta")
        logger.debug(f"Datos recibidos: {sales_order.dict()}")
        
        # Guardar en HANA
        result = hana_service.save_sales_order(sales_order)
        
        if result.success:
            logger.info(f"Orden de venta {result.salesOrderNumber} guardada exitosamente")
        else:
            logger.error(f"Error guardando orden de venta: {result.message}")
        
        return result
        
    except Exception as e:
        logger.error(f"Error en endpoint save_sales_order: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error interno del servidor: {str(e)}"
        )

@router.get("/get/{sales_order_number}")
async def get_sales_order(sales_order_number: str) -> Dict[str, Any]:
    """
    Obtiene una orden de venta por número
    
    Args:
        sales_order_number: Número de la orden de venta
        
    Returns:
        Dict: Datos de la orden de venta
    """
    try:
        logger.info(f"Obteniendo orden de venta {sales_order_number}")
        
        result = hana_service.get_sales_order(sales_order_number)
        
        if result is None:
            raise HTTPException(
                status_code=404,
                detail=f"Orden de venta {sales_order_number} no encontrada"
            )
        
        return {
            "success": True,
            "data": result
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"Error obteniendo orden de venta: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error interno del servidor: {str(e)}"
        )

@router.post("/create-tables")
async def create_tables() -> Dict[str, Any]:
    """
    Crea las tablas necesarias en HANA
    
    Returns:
        Dict: Resultado de la operación
    """
    try:
        logger.info("Creando tablas en HANA")
        
        # Intentar crear las tablas directamente aquí para mejor debug
        connection = hana_service.connection.get_connection()
        cursor = connection.cursor()
        
        # SQL para crear tabla de cabecera
        create_header_table = """
        CREATE TABLE SALES_ORDER_HEADER (
            SALES_ORDER_NUMBER NVARCHAR(10) PRIMARY KEY,
            SALES_ORGANIZATION NVARCHAR(4),
            DISTRIBUTION_CHANNEL NVARCHAR(2),
            DIVISION NVARCHAR(2),
            SALES_OFFICE NVARCHAR(4),
            SALES_GROUP NVARCHAR(3),
            SOLD_TO_PARTY NVARCHAR(10),
            SHIP_TO_PARTY NVARCHAR(10),
            CUSTOMER_REFERENCE NVARCHAR(35),
            NET_VALUE NVARCHAR(20),
            CURRENCY NVARCHAR(3),
            CREATED_BY NVARCHAR(12),
            CREATED_ON TIMESTAMP,
            CREATED_AT NVARCHAR(20),
            CHANGED_ON TIMESTAMP
        )
        """
        
        # SQL para crear tabla de items
        create_items_table = """
        CREATE TABLE SALES_ORDER_ITEMS (
            ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            SALES_ORDER_NUMBER NVARCHAR(10),
            ITEM_NUMBER NVARCHAR(6),
            MATERIAL NVARCHAR(40),
            DESCRIPTION NCLOB,
            QUANTITY NVARCHAR(20),
            UNIT NVARCHAR(3),
            NET_VALUE NVARCHAR(20),
            CURRENCY NVARCHAR(3),
            CREATED_BY NVARCHAR(12),
            CREATED_ON TIMESTAMP,
            CREATED_AT NVARCHAR(20)
        )
        """
        
        messages = []
        
        # Crear tabla de cabecera
        try:
            cursor.execute(create_header_table)
            connection.commit()
            messages.append("Tabla SALES_ORDER_HEADER creada exitosamente")
            logger.info("Tabla SALES_ORDER_HEADER creada exitosamente")
        except Exception as e:
            error_msg = str(e).lower()
            if "already exists" in error_msg or "object name already exists" in error_msg:
                messages.append("Tabla SALES_ORDER_HEADER ya existe")
                logger.info("Tabla SALES_ORDER_HEADER ya existe")
            else:
                messages.append(f"Error creando SALES_ORDER_HEADER: {str(e)}")
                logger.error(f"Error creando tabla SALES_ORDER_HEADER: {str(e)}")
        
        # Crear tabla de items
        try:
            cursor.execute(create_items_table)
            connection.commit()
            messages.append("Tabla SALES_ORDER_ITEMS creada exitosamente")
            logger.info("Tabla SALES_ORDER_ITEMS creada exitosamente")
        except Exception as e:
            error_msg = str(e).lower()
            if "already exists" in error_msg or "object name already exists" in error_msg:
                messages.append("Tabla SALES_ORDER_ITEMS ya existe")
                logger.info("Tabla SALES_ORDER_ITEMS ya existe")
            else:
                messages.append(f"Error creando SALES_ORDER_ITEMS: {str(e)}")
                logger.error(f"Error creando tabla SALES_ORDER_ITEMS: {str(e)}")
        
        cursor.close()
        
        return {
            "success": True,
            "message": "Proceso de creación de tablas completado",
            "details": messages
        }
        
    except Exception as e:
        logger.error(f"Error creando tablas: {str(e)}")
        return {
            "success": False,
            "message": f"Error creando tablas: {str(e)}",
            "details": []
        }

@router.get("/test-connection")
async def test_connection() -> Dict[str, Any]:
    """
    Prueba la conexión a HANA
    
    Returns:
        Dict: Resultado del test de conexión
    """
    try:
        logger.info("Probando conexión a HANA")
        
        result = hana_service.test_connection()
        
        return {
            "success": result,
            "message": "Conexión exitosa" if result else "Error de conexión",
            "connected": result
        }
        
    except Exception as e:
        logger.error(f"Error probando conexión: {str(e)}")
        return {
            "success": False,
            "message": f"Error probando conexión: {str(e)}",
            "connected": False
        }

@router.post("/generate-number")
async def generate_sales_order_number(sales_order: SalesOrderRequest) -> Dict[str, Any]:
    """
    Genera un número de orden de venta SIN guardar en HANA
    
    Args:
        sales_order: Datos de la orden de venta (solo para logging)
        
    Returns:
        Dict: Respuesta con el número generado
    """
    try:
        logger.info("Generando número de orden de venta (SIN guardar en HANA)")
        logger.debug(f"Datos recibidos: {sales_order.dict()}")
        
        # Solo generar el número, no guardar en HANA
        sales_order_number = hana_service.generate_sales_order_number()
        
        logger.info(f"Número de orden generado: {sales_order_number} (NO guardado en HANA)")
        
        return {
            "success": True,
            "message": f"Número de orden {sales_order_number} generado exitosamente (NO guardado en HANA)",
            "salesOrderNumber": sales_order_number,
            "savedToHana": False,
            "data": sales_order.dict()
        }
        
    except Exception as e:
        logger.error(f"Error generando número de orden: {str(e)}")
        raise HTTPException(
            status_code=500,
            detail=f"Error generando número de orden: {str(e)}"
        )

@router.get("/health")
async def health_check() -> Dict[str, Any]:
    """
    Health check para el módulo HANA
    
    Returns:
        Dict: Estado del módulo
    """
    return {
        "status": "healthy",
        "module": "hana",
        "message": "Módulo HANA funcionando correctamente"
    }
