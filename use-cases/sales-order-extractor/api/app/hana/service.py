"""
Servicio para operaciones con HANA
"""

import logging
from datetime import datetime
from typing import Optional, List, Dict, Any
from sqlalchemy.exc import SQLAlchemyError
from .connection import hana_connection
from .models import Base, SalesOrderHeader, SalesOrderItem, SalesOrderRequest, SalesOrderResponse

logger = logging.getLogger(__name__)

class HANAService:
    """Servicio para operaciones con SAP HANA"""
    
    def __init__(self):
        self.connection = hana_connection
    
    def create_tables(self) -> bool:
        """Crea las tablas en HANA si no existen"""
        try:
            logger.info("Creando tablas en HANA...")
            
            # SQL para crear tabla de cabecera - sin verificación previa
            create_header_table = """
            CREATE TABLE SALES_ORDER_HEADER (
                SALES_ORDER_NUMBER NVARCHAR(10) PRIMARY KEY,
                SALES_ORGANIZATION NVARCHAR(4),
                DISTRIBUTION_CHANNEL NVARCHAR(2),
                DIVISION NVARCHAR(2),
                SALES_OFFICE NVARCHAR(4),
                SALES_GROUP NVARCHAR(3),
                SOLD_TO_PARTY NVARCHAR(10),
                SHIP_TO_PARTY NVARCHAR(10),
                CUSTOMER_REFERENCE NVARCHAR(35),
                NET_VALUE NVARCHAR(20),
                CURRENCY NVARCHAR(3),
                CREATED_BY NVARCHAR(12),
                CREATED_ON TIMESTAMP,
                CREATED_AT NVARCHAR(20),
                CHANGED_ON TIMESTAMP
            )
            """
            
            # SQL para crear tabla de items
            create_items_table = """
            CREATE TABLE SALES_ORDER_ITEMS (
                ID INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                SALES_ORDER_NUMBER NVARCHAR(10),
                ITEM_NUMBER NVARCHAR(6),
                MATERIAL NVARCHAR(40),
                DESCRIPTION NCLOB,
                QUANTITY NVARCHAR(20),
                UNIT NVARCHAR(3),
                NET_VALUE NVARCHAR(20),
                CURRENCY NVARCHAR(3),
                CREATED_BY NVARCHAR(12),
                CREATED_ON TIMESTAMP,
                CREATED_AT NVARCHAR(20)
            )
            """
            
            # Intentar crear tabla de cabecera
            try:
                self.connection.execute_query(create_header_table)
                logger.info("Tabla SALES_ORDER_HEADER creada exitosamente")
            except Exception as e:
                error_msg = str(e).lower()
                if "already exists" in error_msg or "table already exists" in error_msg or "object name already exists" in error_msg:
                    logger.info("Tabla SALES_ORDER_HEADER ya existe")
                else:
                    logger.error(f"Error creando tabla SALES_ORDER_HEADER: {str(e)}")
                    # No hacer raise, continuar con la siguiente tabla
            
            # Intentar crear tabla de items
            try:
                self.connection.execute_query(create_items_table)
                logger.info("Tabla SALES_ORDER_ITEMS creada exitosamente")
            except Exception as e:
                error_msg = str(e).lower()
                if "already exists" in error_msg or "table already exists" in error_msg or "object name already exists" in error_msg:
                    logger.info("Tabla SALES_ORDER_ITEMS ya existe")
                else:
                    logger.error(f"Error creando tabla SALES_ORDER_ITEMS: {str(e)}")
                    # No hacer raise, continuar
            
            return True
            
        except Exception as e:
            logger.error(f"Error creando tablas: {str(e)}")
            return False
    
    def generate_sales_order_number(self) -> str:
        """Genera un número de orden de venta de 4 dígitos"""
        try:
            # Buscar el último número usado - usar LIKE para compatibilidad con HANA
            query = """
            SELECT MAX(CAST(SALES_ORDER_NUMBER AS INTEGER)) 
            FROM SALES_ORDER_HEADER 
            WHERE SALES_ORDER_NUMBER NOT LIKE '%[^0-9]%' 
            AND LENGTH(SALES_ORDER_NUMBER) <= 10
            """
            result = self.connection.execute_query(query)
            
            if result and result[0] and result[0][0]:
                last_number = int(result[0][0])
                new_number = last_number + 1
            else:
                # Si no hay registros, empezar desde 1000
                new_number = 1000
            
            return str(new_number).zfill(4)
            
        except Exception as e:
            logger.error(f"Error generando número de orden: {str(e)}")
            # Fallback: usar timestamp
            return str(int(datetime.now().timestamp()))[-4:]
    
    def save_sales_order(self, sales_order_data: SalesOrderRequest) -> SalesOrderResponse:
        """Guarda una orden de venta en HANA"""
        try:
            logger.info("Guardando orden de venta en HANA...")
            
            # Generar número de orden si no se proporciona
            if not sales_order_data.salesOrderNumber:
                sales_order_number = self.generate_sales_order_number()
            else:
                sales_order_number = sales_order_data.salesOrderNumber
            
            # Calcular valor neto total
            total_net_value = self.calculate_total_net_value(sales_order_data.items)
            
            # Preparar datos de cabecera
            current_time = datetime.now()
            current_time_str = current_time.strftime("%I:%M:%S %p")
            
            # Insertar cabecera
            header_query = """
            INSERT INTO SALES_ORDER_HEADER (
                SALES_ORDER_NUMBER, SALES_ORGANIZATION, DISTRIBUTION_CHANNEL, DIVISION,
                SALES_OFFICE, SALES_GROUP, SOLD_TO_PARTY, SHIP_TO_PARTY, CUSTOMER_REFERENCE,
                NET_VALUE, CURRENCY, CREATED_BY, CREATED_ON, CREATED_AT, CHANGED_ON
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """
            
            header_params = [
                sales_order_number,
                sales_order_data.header.salesOrganization,
                sales_order_data.header.distributionChannel,
                sales_order_data.header.division,
                sales_order_data.header.salesOffice or '',
                sales_order_data.header.salesGroup or '',
                sales_order_data.header.soldToParty,
                sales_order_data.header.shipToParty,
                sales_order_data.header.customerReference or '',
                total_net_value,
                'USD',  # Moneda por defecto
                'SAP AI',  # Usuario por defecto
                current_time,
                current_time_str,
                current_time
            ]
            
            # Ejecutar inserción de cabecera
            connection = self.connection.get_connection()
            cursor = connection.cursor()
            cursor.execute(header_query, header_params)
            
            # Insertar items
            item_query = """
            INSERT INTO SALES_ORDER_ITEMS (
                SALES_ORDER_NUMBER, ITEM_NUMBER, MATERIAL, DESCRIPTION, QUANTITY,
                UNIT, NET_VALUE, CURRENCY, CREATED_BY, CREATED_ON, CREATED_AT
            ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """
            
            for item in sales_order_data.items:
                # Extraer moneda del netValue
                currency = self.extract_currency(item.netValue)
                
                item_params = [
                    sales_order_number,
                    item.item,
                    item.material,
                    item.description,
                    item.quantity,
                    item.unit,
                    item.netValue,
                    currency,
                    item.createdBy,
                    current_time,
                    item.createdAt
                ]
                
                cursor.execute(item_query, item_params)
            
            # Hacer commit
            connection.commit()
            cursor.close()
            
            logger.info(f"Orden de venta {sales_order_number} guardada exitosamente")
            
            return SalesOrderResponse(
                success=True,
                message=f"Orden de venta {sales_order_number} guardada exitosamente",
                salesOrderNumber=sales_order_number,
                data={
                    "header": sales_order_data.header.dict(),
                    "items": [item.dict() for item in sales_order_data.items],
                    "totalNetValue": total_net_value
                }
            )
            
        except Exception as e:
            logger.error(f"Error guardando orden de venta: {str(e)}")
            return SalesOrderResponse(
                success=False,
                message=f"Error guardando orden de venta: {str(e)}",
                salesOrderNumber="",
                data=None
            )
    
    def calculate_total_net_value(self, items: List) -> str:
        """Calcula el valor neto total de los items"""
        try:
            total = 0.0
            for item in items:
                # Extraer valor numérico del netValue
                value_str = item.netValue.replace('EUR', '').replace('USD', '').replace(',', '').strip()
                value = float(value_str)
                total += value
            
            return f"{total:.2f} USD"
        except Exception as e:
            logger.error(f"Error calculando valor total: {str(e)}")
            return "0.00 USD"
    
    def extract_currency(self, net_value: str) -> str:
        """Extrae la moneda del valor neto"""
        if 'EUR' in net_value:
            return 'EUR'
        elif 'USD' in net_value:
            return 'USD'
        else:
            return 'USD'  # Por defecto
    
    def get_sales_order(self, sales_order_number: str) -> Optional[Dict[str, Any]]:
        """Obtiene una orden de venta por número"""
        try:
            # Consultar cabecera
            header_query = "SELECT * FROM SALES_ORDER_HEADER WHERE SALES_ORDER_NUMBER = ?"
            header_result = self.connection.execute_query(header_query, [sales_order_number])
            
            if not header_result:
                return None
            
            # Consultar items
            items_query = "SELECT * FROM SALES_ORDER_ITEMS WHERE SALES_ORDER_NUMBER = ?"
            items_result = self.connection.execute_query(items_query, [sales_order_number])
            
            # Convertir ResultRow a diccionarios - manejar ResultRow de HANA
            header_dict = None
            if header_result:
                header_row = header_result[0]
                # Convertir ResultRow a lista de valores y crear diccionario manualmente
                header_dict = {
                    "SALES_ORDER_NUMBER": str(header_row[0]) if header_row[0] else "",
                    "SALES_ORGANIZATION": str(header_row[1]) if header_row[1] else "",
                    "DISTRIBUTION_CHANNEL": str(header_row[2]) if header_row[2] else "",
                    "DIVISION": str(header_row[3]) if header_row[3] else "",
                    "SALES_OFFICE": str(header_row[4]) if header_row[4] else "",
                    "SALES_GROUP": str(header_row[5]) if header_row[5] else "",
                    "SOLD_TO_PARTY": str(header_row[6]) if header_row[6] else "",
                    "SHIP_TO_PARTY": str(header_row[7]) if header_row[7] else "",
                    "CUSTOMER_REFERENCE": str(header_row[8]) if header_row[8] else "",
                    "NET_VALUE": str(header_row[9]) if header_row[9] else "",
                    "CURRENCY": str(header_row[10]) if header_row[10] else "",
                    "CREATED_BY": str(header_row[11]) if header_row[11] else "",
                    "CREATED_ON": str(header_row[12]) if header_row[12] else "",
                    "CREATED_AT": str(header_row[13]) if header_row[13] else "",
                    "CHANGED_ON": str(header_row[14]) if header_row[14] else ""
                }
            
            items_list = []
            if items_result:
                for item_row in items_result:
                    item_dict = {
                        "ID": str(item_row[0]) if item_row[0] else "",
                        "SALES_ORDER_NUMBER": str(item_row[1]) if item_row[1] else "",
                        "ITEM_NUMBER": str(item_row[2]) if item_row[2] else "",
                        "MATERIAL": str(item_row[3]) if item_row[3] else "",
                        "DESCRIPTION": str(item_row[4]) if item_row[4] else "",
                        "QUANTITY": str(item_row[5]) if item_row[5] else "",
                        "UNIT": str(item_row[6]) if item_row[6] else "",
                        "NET_VALUE": str(item_row[7]) if item_row[7] else "",
                        "CURRENCY": str(item_row[8]) if item_row[8] else "",
                        "CREATED_BY": str(item_row[9]) if item_row[9] else "",
                        "CREATED_ON": str(item_row[10]) if item_row[10] else "",
                        "CREATED_AT": str(item_row[11]) if item_row[11] else ""
                    }
                    items_list.append(item_dict)
            
            return {
                "header": header_dict,
                "items": items_list
            }
            
        except Exception as e:
            logger.error(f"Error obteniendo orden de venta: {str(e)}")
            return None
    
    def test_connection(self) -> bool:
        """Prueba la conexión a HANA"""
        return self.connection.test_connection()

# Instancia global del servicio
hana_service = HANAService()
